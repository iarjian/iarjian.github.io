<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://iarjian.github.io</id>
    <title>风车</title>
    <updated>2022-06-01T08:25:38.186Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://iarjian.github.io"/>
    <link rel="self" href="https://iarjian.github.io/atom.xml"/>
    <subtitle>&lt;h3&gt;不知寒暑，不识香臭，不辨是非，&lt;br/&gt;无家国之念，无亲情之观，&lt;br/&gt;无喜乐，无悲欢，与朽木何异？&lt;/h3&gt;</subtitle>
    <logo>https://iarjian.github.io/images/avatar.png</logo>
    <icon>https://iarjian.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, 风车</rights>
    <entry>
        <title type="html"><![CDATA[实现一个缓存架构]]></title>
        <id>https://iarjian.github.io/post/shi-xian-yi-ge-huan-cun-jia-gou/</id>
        <link href="https://iarjian.github.io/post/shi-xian-yi-ge-huan-cun-jia-gou/">
        </link>
        <updated>2020-06-21T07:21:17.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>缓存的作用:加快资源获取速度,提升用户体验,减少网络传输,缓解服务端的压力</p>
</blockquote>
<p>实现思路</p>
<img src="http://img.arjan.cn/20200621115300.jpg" style="zoom:67%;" />
<pre><code class="language-js">//代码实现
//更具流程图代码初步实现
window.mycache = (function(){
  window.cache = {}
  window.cacheArr = [[/*存放cache标记*/],[/*存放localStorage标记*/]]
  return {
    get:function(api){
      return new Promise((resolve,reject)=&gt;{
        console.log(cache[api],localStorage.getItem[api]);
        if(cache[api]){
          resolve(cache[api])
        }else{
          if(localStorage[api]){
            resolve(JSON.parse(localStorage[api]))
          }else{
            this.set(api).then(res=&gt;{
              if(res.data.isHot){
                //localStorage.setItem(api,JSON.stringify(res.data))
                if(cacheArr[1].length &gt; 4){
                  name = cacheArr[1].shift();
                  localStorage.removeItem(name);
                }
                localStorage.setItem(api,JSON.stringify(res));
                console.log(localStorage[api]);
                // localStorage[api] = JSON.stringify(res)
                cacheArr[1].push(api)
              }else{
                if(cacheArr[0].length &gt; 3){
                  name = cacheArr[0].shift();
                  delete cache[api]
                }
                cache[api]=res
                cacheArr[0].push(api)
              }
              resolve(res)
            })
          }
         
        }
        console.log(localStorage,cache);
      })
    },
    set:function(api,data){
      return axios.get(api)
    }
  }
})()

//其他页面进行请求操作
 mycache.get(&quot;http://localhost:3300/api/&quot; + this.$route.params.goodApi).then(res =&gt; {
      this.goodData = res.data;
 });
</code></pre>
<p>由于上面代码看起来结构比较混乱,所以根据设计模式对代码进行优化</p>
<pre><code class="language-js">//优化后的代码
window.mycache = (function () {
  window.cache = {}
  window.cacheArr = [[/*存放cache标记*/], [/*存放localStorage标记*/]]
  return {
    get: function (api) {
      let state = 0;
      let stateHandle = [
        function (resolve, reject) {
          resolve(cache[api])
        },
        function (resolve, reject) {
          resolve(JSON.parse(localStorage[api]))
        },
        function (resolve, reject) {
          let type = 0;
          let name = cacheArr[type].shift()
          this.set(api).then(res =&gt; {
            if (res.data.isHot) {
              type = 1;
              name = cacheArr[type].shift()
              if (cacheArr[1].length &gt; 4) {
                localStorage.removeItem(name);
              }
              localStorage.setItem(api, JSON.stringify(res));
            } else {
              if (cacheArr[0].length &gt; 3) {
                delete cache[api]
              }
              cache[api] = res
            }
            cacheArr[type].push(api);
            resolve(res)
          })
        },
      ]
      return new Promise((resolve, reject) =&gt; {
        if (localStorage[api]) {
          state = 1;
        }
        if (!cache[api] &amp;&amp; !localStorage[api]) {
          state = 2;
        }
        stateHandle[state].call(this,resolve, reject);
      })
    },
    set: function (api, data) {
      return axios.get(api)
    }
  }
})()
</code></pre>
<p>优化后代码结构更加清晰,并且实现Promise结构与逻辑结构进行分离</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用webpack的require.context实现前端自动化]]></title>
        <id>https://iarjian.github.io/post/shi-yong-webpack-de-requirecontext-shi-xian-qian-duan-zi-dong-hua/</id>
        <link href="https://iarjian.github.io/post/shi-yong-webpack-de-requirecontext-shi-xian-qian-duan-zi-dong-hua/">
        </link>
        <updated>2020-06-20T11:17:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="requirecontext是什么">require.context是什么</h3>
<p>一个webpack的api,通过require.context()方法来获取模块的上下文,可以通过该方法实现模块的自动导入,该方法主要有3个参数</p>
<ul>
<li>要搜索的文件夹目录(路径地址)</li>
<li>是否开启搜索子目录(true/false)</li>
<li>匹配文件的正则表达式</li>
</ul>
<pre><code class="language-js">//demo
require.context(&quot;./&quot;,true,/\.vue$/)
//说明:获取当前目录及子目录下所有的后缀为.vue的文件
</code></pre>
<h3 id="自动注册vue全局组件">自动注册Vue全局组件</h3>
<pre><code class="language-js">const r = require.context(&quot;./&quot;, true, /\.vue$/);

const install = (Vue) =&gt; {
    if (install.installed) return;
    install.installed
    r.keys().forEach(filename =&gt; {
        const config = r(filename).default
        Vue.component(config.name, config)//通过组件name进行挂载,需要保证name存在且唯一
    });

    Vue.directive(&quot;focus&quot;, {
        bind() { },
        inserted(el) {
            el.focus();
        }
    })
}

//确保是正常的环境
if (typeof window !== &quot;undefined&quot; &amp;&amp; window.Vue) {
    install(window.Vue);
}

export default install
</code></pre>
<h3 id="路由自动加载">路由自动加载</h3>
<p>随着业务的提升,在大型单页面应用开发是一般会由多人进行开发,此时应该避免修改公共配置.个人只需要维护个人部分来减少项目冲突</p>
<h4 id="实现思路">实现思路</h4>
<ol>
<li>个人开发部分配置一个index.router.js路由文件管理个人部分路由</li>
<li>路由规则统一维护router.js,在router.js中通过require.context()方法获取项目中所有个人部分index.router.js实现自动获取项目路由</li>
</ol>
<pre><code class="language-js">//index.router.js
//vue页面命名规则统一 业务名称+路由名称:mode.index.vue/mode.second.vue
var r = require.context(&quot;./pages&quot;,false,/.vue/);
var arr = [];
r.keys().forEach(key =&gt; {
    var keyarr = key.split(&quot;.&quot;);
    if (key.indexOf(&quot;index&quot;)!==-1) {
        arr.push({
            path:keyarr[1],
            component:r(key).default
        })
    }else{
        arr.push({
            path:keyarr[1]+&quot;/&quot;+keyarr[2],
            component:r(key).default
        })
    }
});
export default arr;
</code></pre>
<pre><code class="language-js">//router.js
import Vue from 'vue'
import VueRouter from 'vue-router'
import Home from '../views/Home.vue'

Vue.use(VueRouter)

var r = require.context(&quot;../views&quot;, true, /\.router\.js/);

var arr = [];

r.keys().forEach(item =&gt; {
  arr = arr.concat(r(item).default);
});
const routes = [
  {
    path: &quot;/&quot;,
    component: Home
  },
  {
    path: &quot;/about&quot;,
    component: () =&gt; import(&quot;../views/About.vue&quot;)
  },
  ...arr
]

const router = new VueRouter({
  mode: 'history',
  base: process.env.BASE_URL,
  routes
})

export default router

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ bit.dev一种新的组件管理工具]]></title>
        <id>https://iarjian.github.io/post/bitdev-yi-chong-xin-de-zu-jian-guan-li-gong-ju/</id>
        <link href="https://iarjian.github.io/post/bitdev-yi-chong-xin-de-zu-jian-guan-li-gong-ju/">
        </link>
        <updated>2020-06-19T09:06:07.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="http://img.arjan.cn/quick-start.svg" alt="" loading="lazy"></figure>
<h2 id="quick-start">Quick Start</h2>
<blockquote>
<p>Bit用来管理代码，任何的代码文件、函数、vue组件、angular组件、react组件、node.js中的module都可以作为Bit组件。</p>
</blockquote>
<h2 id="setup-vuejs中使用bit">Setup---Vue.js中使用bit</h2>
<h3 id="全局安装bit">全局安装bit</h3>
<pre><code class="language-node">npm install bit-bin -g 
//or 
yarn global add bit-bin
</code></pre>
<h3 id="在项目中初始化">在项目中初始化</h3>
<pre><code class="language-node">bit init //项目目录下
</code></pre>
<h3 id="使用bit-add跟踪组件">使用<code>bit add</code>跟踪组件</h3>
<pre><code class="language-node">bit add src/components/my-component.vue --id my-component //跟踪指定组件

bit add src/components/* //跟踪src/components所有组件

bit status //验证组件被跟踪，并且没有文件丢失
</code></pre>
<h3 id="设置组件的版本">设置组件的版本</h3>
<pre><code class="language-node">bit tag --all 1.0.0// 给跟踪的所有组件设置发布的版本号
</code></pre>
<h3 id="发布">发布</h3>
<ol>
<li>
<h4 id="在bitdev申请账号可以使用github账号登录">在bit.dev申请账号(可以使用github账号登录)</h4>
</li>
<li>
<h4 id="创建一个公共的或私有的集合用以存储组件">创建一个公共的或私有的集合，用以存储组件</h4>
</li>
<li>
<h4 id="在项目中使用bit-login登录bit会自动打开浏览器进行身份验证">在项目中使用<code>bit login</code>登录，Bit会自动打开浏览器进行身份验证</h4>
</li>
<li>
<h4 id="导出发布组件">导出/发布组件：</h4>
</li>
</ol>
<pre><code class="language-node">bit export user_name.collection_name
</code></pre>
<blockquote>
<p>导出后到bit.dev集合上查看,可以为组件创建并保存示例,bit会在集合页面中显示为预览</p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="http://img.arjan.cn/TIM%E6%88%AA%E5%9B%BE20200619164638.png" alt="" loading="lazy"></figure>
<h3 id="安装组件-在其他项目中使用组件">安装组件---在其他项目中使用组件</h3>
<p>如果使用NPM或Yarn，则NPM应将Bit配置为作用域注册表（Bit登录时Bit会自动配置它）：</p>
<pre><code class="language-node">npm config set @bit:registry https://node.bit.dev
</code></pre>
<p>然后就可以像安装npm插件包一样进行下载安装</p>
<pre><code class="language-node">npm i @bit/iarjan.demo.demo
//or
yarn add @bit/iarjan.demo.demo
</code></pre>
<figure data-type="image" tabindex="3"><img src="http://img.arjan.cn/TIM%E6%88%AA%E5%9B%BE20200619163234.png" alt="" loading="lazy"></figure>
<h3 id="更新组件">更新组件</h3>
<ol>
<li>
<h4 id="更新本地组件">更新本地组件</h4>
</li>
</ol>
<p>本地的组件要想同步远程的更新直接使用导入命令即可，组件的最新版本会被自动导入：</p>
<pre><code class="language-node">bit import &lt;component_id&gt;
</code></pre>
<ol start="2">
<li>
<h4 id="修改组件并更新至远程">修改组件并更新至远程</h4>
</li>
</ol>
<p>项目中如果修改了通过 <code>bit import</code> 导入的组件就需要将组件更新至远程，这样其它使用者才可同步此修改。</p>
<p>当修改组件后运行<code> bit status</code> 命令会提示 modified components 的相关信息，此时可为组件设置新的版本：</p>
<pre><code class="language-node">bit tag &lt;component_id&gt; &lt;new_version&gt;
</code></pre>
<p>然后将其重新导出到远程集合中：</p>
<pre><code class="language-node">bit export user_name.collection_name
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[函数的防抖和节流]]></title>
        <id>https://iarjian.github.io/post/han-shu-de-fang-dou-he-jie-liu/</id>
        <link href="https://iarjian.github.io/post/han-shu-de-fang-dou-he-jie-liu/">
        </link>
        <updated>2020-01-03T08:50:39.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<h4 id="防抖debounce-所谓防抖就是在事件被触发n秒内函数只执行一次如果在n秒内再次触发则重新开始计时">防抖(debounce) : 所谓防抖,就是在事件被触发n秒内函数只执行一次,如果在n秒内再次触发,则重新开始计时</h4>
</blockquote>
<pre><code class="language-html">//防抖测试代码
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot; /&gt;
        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;
        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;
        &lt;title&gt;debounce防抖&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;button id=&quot;debounce&quot;&gt;点击进行防抖&lt;/button&gt;
        &lt;script&gt;
            window.onload = () =&gt; {
                var myDebounce = document.getElementById(&quot;debounce&quot;);
                myDebounce.addEventListener(
                    &quot;click&quot;,
                    throttle3(handleBtn, 1000, false, &quot;aaaa&quot;, &quot;bb&quot;)
                );
            };
            function debounce(fn, waitTime, ...args) {
                var timeout;
                return function() {
                    if (timeout) clearTimeout(timeout);
                    timeout = setTimeout(() =&gt; {
                        fn.apply(this, args);
                    }, waitTime);
                };
            }
            function debounce2(fn, waitTime, ...args) {
                var timeout;
                return function() {
                    if (timeout) clearTimeout(timeout);
                    var callNow = !timeout;

                    timeout = setTimeout(() =&gt; {
                        timeout = null;
                    }, waitTime);

                    if (callNow) fn.apply(this, args);
                };
            }
            function debounce3(fn, waitTime, immediate, ...args) {
                var timeout;
                return function() {
                    if (timeout) clearTimeout(timeout);
                    if (immediate) {
                        var callNow = !timeout;
                        timeout = setTimeout(() =&gt; {
                            timeout = null;
                        }, waitTime);
                        if (callNow) fn.apply(this, args);
                    } else {
                        timeout = setTimeout(() =&gt; {
                            fn.apply(this, args);
                        }, waitTime);
                    }
                };
            }

            function throttle(fn, waitTime, ...args) {
                var prev = 0;
                return () =&gt; {
                    var now = new Date();
                    if (now - prev &gt; waitTime) {
                        fn.apply(this, args);
                        prev = now;
                    }
                };
            }

            function throttle2(fn, waitTime, ...args) {
                var timeout;
                return () =&gt; {
                    if (!timeout) {
                        timeout = setTimeout(() =&gt; {
                            fn.apply(this, args);
                            timeout = null;
                        }, waitTime);
                    }
                };
            }

            function throttle3(fn, waitTime, type, ...args) {
                if (type === true) {
                    var prev = 0;
                } else if (type === false) {
                    var timeout;
                }

                return () =&gt; {
                    if (type === true) {
                        var now = new Date();
                        if (now - prev &gt; waitTime) {
                            fn.apply(this, args);
                            prev = now;
                        }
                    } else if (type === false) {
                        if (!timeout) {
                            timeout = setTimeout(() =&gt; {
                                fn.apply(this, args);
                                timeout = null;
                            }, waitTime);
                        }
                    }
                };
            }
            function handleBtn() {
                console.log(this, arguments);
                console.log(&quot;防抖延迟执行&quot;);
            }
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>防抖可分为<code>非立即执行</code>和<code>立即执行</code>两种形式:</p>
<pre><code class="language-js">//事件触发延迟执行
function debounce(fn,waitTime,...args){
    //创建一个标记存放定时器的返回值
    var timeout;
    return function () {
        //事件触发清除定时器并重新计时
        if(timeout) clearTimeout(timeout);
        timeout = setTimeout(()=&gt;{
            fn.apply(this,args)
        },waitTime)
    }
}
</code></pre>
<blockquote>
<p>延迟执行:事件触发进行计时,n秒后执行函数,n秒内事件再次触发则重新开始计时</p>
</blockquote>
<pre><code class="language-js">//事件触发立即执行
function debounce(fn,waitTime,...args){
    //创建一个标记存放定时器的返回值
    var timeout;
    return function(){
       	//事件触发清除定时器并重新计时
        if (timeout) clearTimeout(timeout);
        //创建一个标记存放定时是否存在,存在为false
        var callNow = !timeout;
        timeout = setTimeout(()=&gt;{
            //定时结束,清空定时器返回值
            timeout = null;
        },waitTime)
        //如果定时器不存在,即执行后面函数
        if (callNow) fn.apply(this,args)
    }
}
</code></pre>
<blockquote>
<p>立即执行:事件触发则立即执行函数并开始计时,n秒后才能再次执行函数,n秒内事件再次触发则重新开始计时</p>
</blockquote>
<pre><code class="language-js">//合并版
/**
 * @methods
 * @desc debounce防抖函数
 * @param fn 函数
 * @param waitTime 延迟执行毫秒数
 * @param immediate true 表立即执行，false 表非立即执行
 */

function debounce(fn,waitTime,immediate,...args){
    var timeout;
    return function () {
        if(timeout) clearTimeout(timeout);
        if(immediate){
            var callNow = !timeout;
            timeout = setTimeout(()=&gt;{
                timeout = null;
            },waitTime)
            if (callNow) fn.apply(this,args)
        }else{
            timeout = setTimeout(()=&gt;{
                fn.apply(this,args)
            },waitTime)
        }
    }
}
</code></pre>
<blockquote>
<h4 id="节流throttle所谓节流就是指连续触发事件但是在n秒内只执行一次函数">节流(throttle):所谓节流,就是指连续触发事件,但是在n秒内只执行一次函数</h4>
</blockquote>
<pre><code class="language-js">//通过时间戳计算时间间隔
function throttle(fn, waitTime,...args) {    
    var prev = 0;
    return ()=&gt;{
        var now = new Date();
        if (now - prev &gt; waitTime) {
            fn.apply(this,args);
            prev = now;
        }
    }
}
</code></pre>
<p>通过时间戳计算时间间隔在事件触发时间段开始时执行</p>
<pre><code class="language-js">//通过定时器进行延迟执行
function throttle(fn, waitTime,...args) {
    var timeout;
    return ()=&gt;{
        if (!timeout) {
            timeout = setTimeout(()=&gt;{
                fn.apply(this,args);
                timeout=null;
            },waitTime)
        }
    }
}
</code></pre>
<p>通过定时器延迟执行在事件触发时间段结束时执行</p>
<pre><code class="language-js">//合并版
/**
 * @methods
 * @desc throttle 节流函数
 * @param func 函数
 * @param waitTime 延迟执行毫秒数
 * @param type true 表时间戳版，false 表定时器版
 */

function throttle(fn,waitTime,type,...args) {
    if (type === true) {
	    var prev = 0;
	} else if (type === false) {
	    var timeout;
	}
	return () =&gt; {
	    if (type === true) {
	        var now = new Date();
	        if (now - prev &gt; waitTime) {
	            fn.apply(this, args);
	            prev = now;
	        }
	    } else if (type === false) {
	        if (!timeout) {
	            timeout = setTimeout(() =&gt; {
	                fn.apply(this, args);
	                timeout = null;
	            }, waitTime);
	        }
	    }
	};
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ js生成随机颜色]]></title>
        <id>https://iarjian.github.io/post/js-sheng-cheng-sui-ji-yan-se/</id>
        <link href="https://iarjian.github.io/post/js-sheng-cheng-sui-ji-yan-se/">
        </link>
        <updated>2019-12-24T02:23:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="一随机rgb颜色值">一.随机RGB颜色值</h3>
<pre><code class="language-js">/**
 * 产生一个随机的rgb颜色
 * @return {String}  返回颜色rgb值字符串内容，如：rgb(201, 57, 96)
 */
function color(){//rgb颜色随机
			var r = Math.floor(Math.random()*256);
			var g = Math.floor(Math.random()*256);
			var b = Math.floor(Math.random()*256);
			var rgb = 'rgb('+r+','+g+','+b+')';
			return rgb;
}
</code></pre>
<h3 id="二生成十六进制的颜色值">二.生成十六进制的颜色值</h3>
<pre><code class="language-js">/**
 * 产生一个随机的十六进制颜色
 * @return {String}  返回颜色十六进制字符串内容，如：#8abbbf
 */
function color(){
        //arguments.callee()递归调用
		return  '#' + (function(color){    
         return (color +=  '0123456789abcdef'[Math.floor(Math.random()*16)])    
         &amp;&amp; (color.length == 6) ?  color : arguments.callee(color);    
   		})('');    
}
</code></pre>
<h3 id="三">三</h3>
<pre><code class="language-js">/**
 * 产生一个随机的十六进制颜色
 * @return {String}  返回颜色十六进制字符串内容，如：#8abbbf
 */
function color(){
       return  '#'+('00000'+Math.random().toString(16)).slice(-6)
}
</code></pre>
<h3 id="四">四</h3>
<pre><code class="language-js">/**
 * 产生一个随机的十六进制颜色
 * @return {String}  返回颜色十六进制字符串内容，如：#8abbbf
 */
function color(){
    //return '#'+Math.floor(Math.random()*0xffffff).toString(16);
    //return '#'+('00000'+(Math.random()*0x1000000&lt;&lt;0).toString(16)).slice(-6);  
    return '#'+('00000'+Math.floor(Math.random()*0xffffff).toString(16)).slice(-6)
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[new Date()设置日期在IOS的兼容问题]]></title>
        <id>https://iarjian.github.io/post/new-dateshe-zhi-ri-qi-zai-ios-de-jian-rong-wen-ti/</id>
        <link href="https://iarjian.github.io/post/new-dateshe-zhi-ri-qi-zai-ios-de-jian-rong-wen-ti/">
        </link>
        <updated>2019-11-18T05:46:33.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>由于ios和Android的浏览器内核差异,ios对于new Date存在兼容性差异</p>
</blockquote>
<pre><code class="language-js">//常规日期变量的创建
let time = new Date(&quot;2019-11-18 12:00:00&quot;);
</code></pre>
<p>这种声明方式在Android和pc端可以正常使用</p>
<p>在ios中不兼容,返回valid Date</p>
<p>iOS中的new Date() 时间格式应该是<code>YYYY/MM/DD HH:MM:SS 或者 YYYY-MM-DDTHH:MM:SS</code>也就是把中间的空格换成T(大写T)</p>
<pre><code class="language-js">let time = new Date(&quot;2019-11-18 12:00:00&quot;.replace(/-/g, &quot;/&quot;));
//or
let time = new Date(&quot;2019-11-18 12:00:00&quot;.replace(/\s/, 'T'));
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript面向对象编程：类]]></title>
        <id>https://iarjian.github.io/post/typescript-mian-xiang-dui-xiang-bian-cheng-lei/</id>
        <link href="https://iarjian.github.io/post/typescript-mian-xiang-dui-xiang-bian-cheng-lei/">
        </link>
        <updated>2019-11-11T06:32:06.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>面向对象程序设计（OOP）是一种计算机编程架构。OOP的基本原则是计算机程序由单个能够起到子程序作用的单元或对象组合而成。OOP主要目标：重用性、灵活性和扩展性。面向对象的基本特性是：封装、继承、多态、抽象</p>
</blockquote>
<h3 id="对象是类的实例类是对象的模板">对象是类的实例，类是对象的模板</h3>
<h4 id="类的定义">类的定义</h4>
<pre><code class="language-javascript">class Person {
    name: string;
    age: number;
    constructor(name: string, age: number) {
        this.name = name;
        this.age = age;
    }
    hello() {
        console.log('hello' + this.name);
    }
}
let me = new Person(&quot;风车&quot;);
me.hello();
</code></pre>
<p>我们先用class声明了一个名为Person的类,这个类中包含:name和age属性、一个构造函数、一个名hello的方法</p>
<h4 id="类的继承和重写">类的继承和重写</h4>
<p>可以新建一个类（子类），从已有的类（父类）中获取其所有的属性和方法称为继承。子类可以新建父类没有的属性和方法</p>
<pre><code class="language-javascript">class Home {
    name: string;
    constructor(name: string) {
        this.name = name
    }
    interest(say: string = '哈哈哈') {
        console.log(`${this.name} at home and ${say}`);
    }
}
</code></pre>
<p>创建了一个父类Home，其中包含name属性、一个构造函数、一个interest方法。</p>
<pre><code class="language-javascript">class Cat extends Home {
    constructor(name: string) {
        super(name)
    };
    food() {
        console.log(`${this.name}吃猫粮`);
    }
}
let sam = new Cat('Tom');
console.log(sam.name);
sam.interest();
sam.food(); /*TomTom at home and 哈哈哈Tom吃猫粮*/
</code></pre>
<p>创建了一个Cat的子类，Cat继承了父类的name属性和interest方法并且有自己的food方法</p>
<pre><code class="language-javascript">class Mouse extends Home {
    constructor(name: string) {
        super(name)
    }
    interest(say: string = '哟哟哟') {
        super.interest(say) console.log(&quot;切克闹&quot;);
    }
}
let Jerry = new Mouse('Jerry');
console.log(Jerry.name);
Jerry.interest('要要要'); /*JerryJerry at home and 要要要切克闹*/
</code></pre>
<p>创建了一个Mouse的子类，Cat继承了父类的name属性和interest方法并且重写了父类的interest方法</p>
<h4 id="类的修饰符">类的修饰符</h4>
<ol>
<li>public：公有的，类的成员可以从类外直接访问，默认修饰符</li>
<li>protected：受保护的，可以在本类和子类中使用修饰的属性和方法</li>
<li>private : 私有的，只可以在本类内部使用。</li>
</ol>
<pre><code class="language-javascript">class Parent {
    public sex: string;
    protected name: string;
    private age: number;
    constructor(sex: string, name: string, age: number) {
        this.sex = sex;
        this.name = name;
        this.age = age;
    }
    public catName() {
        console.log('Tom');
    }
    protected mouseName() {
        console.log('Jerry');
    }
}
let tom = new Parent('nan', 'Tom', 3);
console.log(tom.sex);
console.log(tom.name); 
//报错console.log(tom.age);
//报错tom.catName();top.mouseName();
//报错
//注意：此处报错为typescript语法报错，编译后依然可以打印其对应的值
</code></pre>
<ol>
<li>readonly只读修饰符</li>
</ol>
<pre><code class="language-javascript">class Man {
    public readonly sex: string = '男'
}
var man: Man = new Man() man.sex = '女' //报错
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript:数据类型]]></title>
        <id>https://iarjian.github.io/post/typescriptshu-ju-lei-xing/</id>
        <link href="https://iarjian.github.io/post/typescriptshu-ju-lei-xing/">
        </link>
        <updated>2019-11-11T06:29:54.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1什么是typescript">1.什么是typescript</h2>
<p>TypeScript是一种由微软开发的自由和开源的编程语言。它是JavaScript的一个严格超集，TypeScript扩展了JavaScript的语法，在JavaScript的基础上添加了可选的静态类型和基于类的面向对象编程。</p>
<p>TypeScript设计目标是开发大型应用，然后转译成JavaScript以确保兼容性。由于TypeScript是JavaScript的严格超集，任何现有的JavaScript程序都是不加改变的在TypeScript下正常工作。</p>
<h2 id="2typescript中的数据类型">2.TypeScript中的数据类型</h2>
<ul>
<li>
<p>boolean : 布尔值类型</p>
</li>
<li>
<p>number : 数字类型</p>
</li>
<li>
<p>string : 字符串类型</p>
</li>
<li>
<p>Array : 数组类型</p>
</li>
<li>
<p>Tuple : 元祖类型</p>
</li>
<li>
<p>enum : 枚举类型</p>
</li>
<li>
<p>Any : 任意类型</p>
</li>
<li>
<p>Void : 空类型</p>
</li>
<li>
<p>Null : 空类型</p>
</li>
<li>
<p>Undefined:</p>
<h3 id="21布尔值">2.1布尔值</h3>
<p>布尔类型只包含true/false值</p>
<pre><code>let isDone: boolean = false;
let isUp: boolean = true;
</code></pre>
<h3 id="22数字类型">2.2数字类型</h3>
<p>在TypeScript里的所有数字都是Number类型，不区分整数和小数</p>
<pre><code>let age: number = 18;
let stature: number = 175.5
</code></pre>
<h3 id="23字符串类型">2.3字符串类型</h3>
<p>我们使用 <code>string</code>表示文本数据类型，和JavaScript一样，可以使用双引号（ <code>&quot;</code>）或单引号（<code>'</code>）表示字符串。例如“你好”，‘hello’。同样支持es6的模板字符串（``）</p>
<pre><code>let name: string = &quot;windmills&quot;;
name = '风车'
let introduce: string = `你好，我是${name}` //你好，我是风车
</code></pre>
<h3 id="24数组类型">2.4数组类型</h3>
<p>TypeScript像JavaScript一样可以操作数组元素。有两种方式可以定义数组。第一种，可以在元素类型后面接上 []，表示由此类型元素组成的一个数组：</p>
<pre><code>let list: number[] = [1, 2, 3];
</code></pre>
<p>第二种方式是使用数组泛型，<code>Array&lt;元素类型&gt;</code>：</p>
<pre><code>let list: Array&lt;number&gt; = [1, 2, 3];
</code></pre>
<h3 id="25元祖类型">2.5元祖类型</h3>
<p>元祖类型是一种特殊的数组, 元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。比如，你可以定义一对值分别为 <code>string</code>和<code>number</code>类型的元组。</p>
<pre><code>let x: [string, number];
x = ['hello', 10]; 
//正确的初始化x = [10,'hello'];
//错误的初始化x = [true,false];
//Error, 布尔不是(string | number)类型
</code></pre>
<h3 id="26枚举类型">2.6枚举类型</h3>
<p>当我们的变量的值是固定的时候,就可以使用枚举来进行声明</p>
<p>例如:一年的季节有:春,夏,秋,冬.四个结果</p>
<pre><code>//默认情况下，从0开始为元素编号。
enum Season = {
    spring,
    summer,
    autumn,
    winter
}
let s: Season = Season.autumnconsole.log(s)
//此时返回索引值2//也可以手动的指定成员的数值。例如，我们将上面的例子改成从 1开始编号：
enum Season = {
    spring = 1,
    summer,
    autumn,
    winter
}
let s: Season = Season.autumnconsole.log(s)
//此时返回3
//也可以全部手动赋值
enum Season = {
    spring = 3,
    summer = 6,
    autumn = 9,
    winter = 12
}
let s: Season = Season.autumnconsole.log(s)
//此时返回9
</code></pre>
<p>枚举类型提供的一个便利是你可以由枚举的值得到它的名字。例如，我们知道数值为2，但是不确定它映射到Color里的哪个名字，我们可以查找相应的名字：</p>
<pre><code>enum Season = {
    spring = 1,
    summer,
    autumn,
    winter
}
let sName: string = Season[3] console.log(sName)
//显示'autumn'因为上面代码里它的值是3
</code></pre>
<h3 id="27any任意类型">2.7Any任意类型</h3>
<p>有时候在什么变量的时候不确定变量的类型,或者变量在赋值过程中被赋予各种类型的类型时,就可以用any类型类标记这些变量</p>
<pre><code>let notSure: any = 4;
notSure = '赋予一个字符串的值'
notSure = true
//也可以赋予一个布尔值等
</code></pre>
<h3 id="28void空类型">2.8Void空类型</h3>
<p>void表示没有任何类型,某种程度上看，<code>void</code>类型像是与<code>any</code>类型相反。例如当一个函数没有返回值时, 其返回的类型可以设置为void</p>
<pre><code>function fun(): void {
    console.log('此时函数没有返回值')
}
//声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined和null：
let unusable: void = undefined;
</code></pre>
<h3 id="29null-和-undefined">2.9Null 和 Undefined</h3>
<p>null 和 undefined类型本身的实际用处不是很大,声明一个null 和 undefined类型的变量只能为它赋予本身null或undefined</p>
<p>默认情况下nul和undefined是所有类型的子类型。就是说你可以把nul和undefined赋值给number类型的变量。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[yarn和npm常用指令]]></title>
        <id>https://iarjian.github.io/post/yarn-he-npm-chang-yong-zhi-ling/</id>
        <link href="https://iarjian.github.io/post/yarn-he-npm-chang-yong-zhi-ling/">
        </link>
        <updated>2019-11-07T08:15:01.000Z</updated>
        <content type="html"><![CDATA[<table>
<thead>
<tr>
<th style="text-align:left">npm</th>
<th style="text-align:left">yarn</th>
<th style="text-align:left">用法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">npm init</td>
<td style="text-align:left">yarn init</td>
<td style="text-align:left">初始化项目</td>
</tr>
<tr>
<td style="text-align:left">npm install</td>
<td style="text-align:left">yarn / yarn install</td>
<td style="text-align:left">一键安装package.json的所有包</td>
</tr>
<tr>
<td style="text-align:left">npm install [package] --save / -S</td>
<td style="text-align:left">yarn add [package]</td>
<td style="text-align:left">安装到dependencies , 默认保存到package</td>
</tr>
<tr>
<td style="text-align:left">npm install [package] --save-dev/ -D</td>
<td style="text-align:left">yarn add [package] --save-dev/ -D</td>
<td style="text-align:left">安装到devDependencies(开发时的依赖项目)</td>
</tr>
<tr>
<td style="text-align:left">npm i [package]@[版本号]</td>
<td style="text-align:left">yarn add [package]@[版本号]</td>
<td style="text-align:left">指定版本号下载更新</td>
</tr>
<tr>
<td style="text-align:left">npm install [package] --global</td>
<td style="text-align:left">yarn global add [package]</td>
<td style="text-align:left">全局安装某个包</td>
</tr>
<tr>
<td style="text-align:left">npm update --global</td>
<td style="text-align:left">yarn updade upgrade</td>
<td style="text-align:left">更新所有包</td>
</tr>
<tr>
<td style="text-align:left">npm uninstall [package]</td>
<td style="text-align:left">yarn remove [package]</td>
<td style="text-align:left">删除某个包</td>
</tr>
<tr>
<td style="text-align:left">npm publish/login/loginout</td>
<td style="text-align:left">yarn publish/login/loginout</td>
<td style="text-align:left">发布/登录/登出,一系列NPM Registry操作</td>
</tr>
<tr>
<td style="text-align:left">npm run/test</td>
<td style="text-align:left">yarn run/test</td>
<td style="text-align:left">运行某个命令</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown基本语法]]></title>
        <id>https://iarjian.github.io/post/markdown-ji-ben-yu-fa/</id>
        <link href="https://iarjian.github.io/post/markdown-ji-ben-yu-fa/">
        </link>
        <updated>2019-10-24T06:33:09.000Z</updated>
        <summary type="html"><![CDATA[<p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
<!-- more -->
<h3 id="1标题">1.标题</h3>
<p>标题使用“#”来标识h1~h6：</p>
<pre><code class="language-html"># h1
## h2
### h3
#### h4
##### h5
###### h6
</code></pre>
<h1 id="h1">h1</h1>
<h2 id="h2">h2</h2>
<h3 id="h3">h3</h3>
<h4 id="h4">h4</h4>
<h5 id="h5">h5</h5>
<h6 id="h6">h6</h6>
<h3 id="2字体">2.字体</h3>
<pre><code>**这是加粗的文字**
*这是倾斜的文字*`
***这是斜体加粗的文字***
~~这是加删除线的文字~~
</code></pre>
<p><strong>这是加粗的文字</strong><br>
<em>这是倾斜的文字</em>`<br>
<em><strong>这是斜体加粗的文字</strong></em><br>
<s>这是加删除线的文字</s></p>
<h3 id="3图片">3.图片</h3>
<pre><code class="language-html">![图片alt]( http://iarjan.gitee.io/images_bed/img/bg4.png )
</code></pre>
<figure data-type="image" tabindex="1"><img src="http://iarjan.gitee.io/images_bed/img/bg4.png" alt="图片alt" loading="lazy"></figure>
<h3 id="4超链接">4.超链接</h3>
<pre><code class="language-html">[My blog]( http://arjan.coding.me/ )
</code></pre>
<p><a href="http://arjan.coding.me/">My blog</a></p>
<h3 id="5列表">5.列表</h3>
<p>Markdown 支持有序列表和无序列表。</p>
<p>无序列表使用星号、加号或是减号作为列表标记：</p>
<pre><code class="language-hljs">*   Red
*   Green
*   Blue
</code></pre>
<p>等同于</p>
<pre><code>+   Red
+   Green
+   Blue
</code></pre>
<p>和</p>
<pre><code>-   Red
-   Green
-   Blue
</code></pre>
<ul>
<li>Red</li>
<li>Green</li>
<li>Blue</li>
</ul>
<p>有序列表则使用数字接着一个英文句点：</p>
<pre><code>1.   Red
2.   Green
3.   Blue
</code></pre>
<h3 id="6分割线">6.分割线</h3>
<p>在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。可以在星号或是减号中间插入任意数量的空格。下面每种写法都可以建立分隔线：</p>
<pre><code>* * *
***
*****
- - -
---------
</code></pre>
<hr>
<hr>
<hr>
<hr>
<hr>
<h3 id="7引用">7.引用</h3>
<p>Markdown 通过“&gt;”来引用内容，可以在引用开头加一个，也可以在引用每一行的前面都加一个，引用也可以嵌套，示例如下：</p>
<pre><code>&gt; 这是一段引用
&gt; &gt; 这是一段二级引用
</code></pre>
<blockquote>
<p>这是一段引用</p>
<blockquote>
<p>这是一段二级引用</p>
</blockquote>
</blockquote>
<h3 id="8代码">8.代码</h3>
<p>如果要标记一小段行内代码，可以用反引号把它包起来（`），示例如下：</p>
<pre><code>github中`README.md`文件的编写
</code></pre>
<p>github中<code>README.md</code>文件的编写</p>
<p>标记代码段需要使用三个反引号包围代码段，前面三个反引号后紧跟代码所使用语言可使代码高亮</p>
<pre><code>​```
	.main{height:200px}
​```
</code></pre>
<pre><code class="language-CSS">	.main{height:200px}
</code></pre>
<h3 id="9表格">9.表格</h3>
<blockquote>
<p>-:表示内容和标题栏居右对齐<br>
:-表示内容和标题栏居左对齐<br>
:-:表示内容和标题栏居中对齐。<br>
内容和|之间的多余空格会被忽略，每行第一个|和最后一个|可以省略，-的数量至少有一个。</p>
</blockquote>
<p>极简方式</p>
<pre><code class="language-json">|  calss | age |
| ------------ | ------------ |
| 1 | 18 |
| 2 | 20 |
</code></pre>
<table>
<thead>
<tr>
<th>calss</th>
<th>age</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>18</td>
</tr>
<tr>
<td>2</td>
<td>20</td>
</tr>
</tbody>
</table>
<h4 id="居中对齐">居中对齐</h4>
<pre><code class="language-json">|  class | age  |
| :------------: | :------------: |
| 1 | 18 |
| 2 | 20 |
</code></pre>
<table>
<thead>
<tr>
<th>class</th>
<th>age</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>18</td>
</tr>
<tr>
<td>2</td>
<td>20</td>
</tr>
</tbody>
</table>
<h4 id="左对齐">左对齐</h4>
<pre><code class="language-json">|  class | age  |
| :------------ | :------------ |
| 1 | 18 |
| 2 | 20 |
</code></pre>
<table>
<thead>
<tr>
<th>class</th>
<th>age</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>18</td>
</tr>
<tr>
<td>2</td>
<td>20</td>
</tr>
</tbody>
</table>
<h4 id="右对齐">右对齐</h4>
<pre><code class="language-json">|  class | age  |
| ------------: | ------------: |
| 1 | 18 |
| 2 | 20 |
</code></pre>
<table>
<thead>
<tr>
<th>class</th>
<th>age</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>18</td>
</tr>
<tr>
<td>2</td>
<td>20</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
</feed>